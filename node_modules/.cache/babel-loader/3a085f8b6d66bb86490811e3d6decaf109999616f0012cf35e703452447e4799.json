{"ast":null,"code":"var _excluded = [\"date\", \"future\", \"timeStyle\", \"round\", \"minTimeLeft\", \"tooltip\", \"component\", \"container\", \"wrapperComponent\", \"wrapperProps\", \"locale\", \"locales\", \"formatVerboseDate\", \"verboseDateFormat\", \"updateInterval\", \"tick\", \"now\", \"timeOffset\", \"polyfill\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport TimeAgo from 'javascript-time-ago';\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter.js';\nimport { getDate } from './helpers/date.js';\nimport getTimeAgo from './helpers/getTimeAgo.js';\nimport Updater from './Updater.js';\nimport Time from './Time.js';\nimport { style as styleType } from './PropTypes.js';\nfunction ReactTimeAgo(_ref) {\n  var date = _ref.date,\n    future = _ref.future,\n    timeStyle = _ref.timeStyle,\n    round = _ref.round,\n    minTimeLeft = _ref.minTimeLeft,\n    tooltip = _ref.tooltip,\n    Component = _ref.component,\n    container = _ref.container,\n    wrapperComponent = _ref.wrapperComponent,\n    wrapperProps = _ref.wrapperProps,\n    locale = _ref.locale,\n    locales = _ref.locales,\n    formatVerboseDate = _ref.formatVerboseDate,\n    verboseDateFormat = _ref.verboseDateFormat,\n    updateInterval = _ref.updateInterval,\n    tick = _ref.tick,\n    nowProperty = _ref.now,\n    timeOffset = _ref.timeOffset,\n    polyfill = _ref.polyfill,\n    rest = _objectWithoutProperties(_ref, _excluded);\n\n  // Get the list of preferred locales.\n  var preferredLocales = useMemo(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    } // Add `javascript-time-ago` default locale.\n\n    return locales.concat(TimeAgo.getDefaultLocale());\n  }, [locale, locales]); // Create `javascript-time-ago` formatter instance.\n\n  var timeAgo = useMemo(function () {\n    return getTimeAgo(preferredLocales, {\n      polyfill: polyfill\n    });\n  }, [preferredLocales, polyfill]); // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n\n  date = useMemo(function () {\n    return getDate(date);\n  }, [date]); // Formats the `date`.\n\n  var formatDate = useCallback(function () {\n    var now = (nowProperty || Date.now()) - timeOffset;\n    var stopUpdates;\n    if (future) {\n      if (now >= date.getTime()) {\n        now = date.getTime();\n        stopUpdates = true;\n      }\n    }\n    if (minTimeLeft !== undefined) {\n      var maxNow = date.getTime() - minTimeLeft * 1000;\n      if (now > maxNow) {\n        now = maxNow;\n        stopUpdates = true;\n      }\n    }\n    var _timeAgo$format = timeAgo.format(date, timeStyle, {\n        getTimeToNextUpdate: true,\n        now: now,\n        future: future,\n        round: round\n      }),\n      _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),\n      formattedDate = _timeAgo$format2[0],\n      timeToNextUpdate = _timeAgo$format2[1];\n    if (stopUpdates) {\n      timeToNextUpdate = INFINITY;\n    } else {\n      // Legacy compatibility: there used to be an `updateInterval` property.\n      // That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\n      // A default interval of one minute is introduced because\n      // `getTimeToNextUpdate` feature may theoretically return `undefined`.\n      timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.\n    }\n\n    return [formattedDate, now + timeToNextUpdate];\n  }, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo, nowProperty]);\n  var formatDateRef = useRef();\n  formatDateRef.current = formatDate;\n  var _useMemo = useMemo(formatDate, []),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    _formattedDate = _useMemo2[0],\n    _nextUpdateTime = _useMemo2[1];\n  var _useState = useState(_formattedDate),\n    _useState2 = _slicedToArray(_useState, 2),\n    formattedDate = _useState2[0],\n    setFormattedDate = _useState2[1];\n  var updater = useRef();\n  useEffect(function () {\n    if (tick) {\n      updater.current = Updater.add({\n        getNextValue: function getNextValue() {\n          return formatDateRef.current();\n        },\n        setValue: setFormattedDate,\n        nextUpdateTime: _nextUpdateTime\n      });\n      return function () {\n        return updater.current.stop();\n      };\n    }\n  }, [tick]);\n  useEffect(function () {\n    if (updater.current) {\n      updater.current.forceUpdate();\n    } else {\n      var _formatDate = formatDate(),\n        _formatDate2 = _slicedToArray(_formatDate, 1),\n        _formattedDate2 = _formatDate2[0];\n      setFormattedDate(_formattedDate2);\n    }\n  }, [formatDate]); // Create verbose date formatter for the tooltip text.\n\n  var verboseDateFormatter = useMemo(function () {\n    return getVerboseDateFormatter(preferredLocales, verboseDateFormat);\n  }, [preferredLocales, verboseDateFormat]); // Format verbose date for the tooltip.\n\n  var verboseDate = useMemo(function () {\n    if (formatVerboseDate) {\n      return formatVerboseDate(date);\n    }\n    return verboseDateFormatter(date);\n  }, [date, formatVerboseDate, verboseDateFormatter]);\n  var result = /*#__PURE__*/React.createElement(Component, _extends({\n    date: date,\n    verboseDate: verboseDate,\n    tooltip: tooltip\n  }, rest), formattedDate);\n  var WrapperComponent = wrapperComponent || container;\n  if (WrapperComponent) {\n    return /*#__PURE__*/React.createElement(WrapperComponent, _extends({}, wrapperProps, {\n      verboseDate: verboseDate\n    }), result);\n  }\n  return result;\n}\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Alternatively to `locale`, one could pass `locales`:\n  // A list of preferred locales (ordered).\n  // Will choose the first supported locale from the list.\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // If set to `true`, then will stop at \"zero point\"\n  // when going from future dates to past dates.\n  // In other words, even if the `date` has passed,\n  // it will still render as if `date` is `now`.\n  future: PropTypes.bool,\n  // Date/time formatting style.\n  // See `javascript-time-ago` docs on \"Styles\" for more info.\n  // E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\n  timeStyle: styleType,\n  // `round` parameter of `javascript-time-ago`.\n  // See `javascript-time-ago` docs on \"Rounding\" for more info.\n  // Examples: \"round\", \"floor\".\n  round: PropTypes.string,\n  // If specified, the time won't \"tick\" past this threshold (in seconds).\n  // For example, if `minTimeLeft` is `60 * 60`\n  // then the time won't \"tick\" past \"in 1 hour\".\n  minTimeLeft: PropTypes.number,\n  // A React component to render the relative time label.\n  // Receives properties:\n  // * date: Date — The date.\n  // * verboseDate: string — Formatted verbose date.\n  // * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\n  // * children: string — The relative time label.\n  // * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\n  component: PropTypes.elementType.isRequired,\n  // Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\n  // Is `true` by default.\n  // Can be set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // Verbose date formatter.\n  // By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for formatting verbose date.\n  // See `Intl.DateTimeFormat` docs for more info.\n  verboseDateFormat: PropTypes.object,\n  // (deprecated)\n  // How often the component refreshes itself.\n  // Instead, consider using `getNextTimeToUpdate()` feature\n  // of `javascript-time-ago` styles.\n  updateInterval: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.shape({\n    threshold: PropTypes.number,\n    interval: PropTypes.number.isRequired\n  }))]),\n  // (deprecated).\n  // Set to `false` to disable automatic refresh of the component.\n  // Is `true` by default.\n  // I guess no one actually turns that off.\n  tick: PropTypes.bool,\n  // Allows setting a custom baseline for relative time measurement.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\n  now: PropTypes.number,\n  // Allows offsetting the `date` by an arbitrary amount of milliseconds.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\n  timeOffset: PropTypes.number,\n  // Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\n  // instead of the polyfilled ones in `javascript-time-ago`.\n  polyfill: PropTypes.bool,\n  // (advanced)\n  // A React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // Also receives `wrapperProps`, if they're passed.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  // See the \"Tooltip\" readme section for more info.\n  // Another example could be having `wrapperComponent`\n  // being rerendered every time the component refreshes itself.\n  wrapperComponent: PropTypes.elementType,\n  // Custom `props` passed to `wrapperComponent`.\n  wrapperProps: PropTypes.object\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Use a `<time/>` tag by default.\n  component: Time,\n  // Use HTML `tooltip` attribute to show a verbose date tooltip.\n  tooltip: true,\n  // `Intl.DateTimeFormat` for verbose date.\n  // Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName: 'short'\n  },\n\n  // Automatically refreshes itself.\n  tick: true,\n  // No time offset.\n  timeOffset: 0\n}; // The component schedules a next refresh every time it renders.\n// There's no need to rerender this component unless its props change.\n\nReactTimeAgo = /*#__PURE__*/React.memo(ReactTimeAgo);\nexport default ReactTimeAgo; // A thousand years is practically a metaphor for \"infinity\"\n// in the context of this component.\n\nvar YEAR = 365 * 24 * 60 * 60 * 1000;\nvar INFINITY = 1000 * YEAR;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,WAA7C,EAA0DC,OAA1D,QAAyE,OAAzE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,uBAAP,MAAoC,sCAApC;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,KAAK,IAAIC,SAAlB,QAAmC,gBAAnC;AAEA,SAASC,YAAT,OAuBG;EAAA,IAtBFC,IAsBE,QAtBFA,IAsBE;IArBFC,MAqBE,QArBFA,MAqBE;IApBFC,SAoBE,QApBFA,SAoBE;IAnBFC,KAmBE,QAnBFA,KAmBE;IAlBFC,WAkBE,QAlBFA,WAkBE;IAjBFC,OAiBE,QAjBFA,OAiBE;IAhBSC,SAgBT,QAhBFC,SAgBE;IAbFC,SAaE,QAbFA,SAaE;IAZFC,gBAYE,QAZFA,gBAYE;IAXFC,YAWE,QAXFA,YAWE;IAVFC,MAUE,QAVFA,MAUE;IATFC,OASE,QATFA,OASE;IARFC,iBAQE,QARFA,iBAQE;IAPFC,iBAOE,QAPFA,iBAOE;IANFC,cAME,QANFA,cAME;IALFC,IAKE,QALFA,IAKE;IAJGC,WAIH,QAJFC,GAIE;IAHFC,UAGE,QAHFA,UAGE;IAFFC,QAEE,QAFFA,QAEE;IADCC,IACD;;EACF;EACA,IAAMC,gBAAgB,GAAGjC,OAAO,CAAC,YAAM;IACtC;IACA,IAAIsB,MAAJ,EAAY;MACXC,OAAO,GAAG,CAACD,MAAD,CAAV;IACA,CAJqC,CAKtC;;IACA,OAAOC,OAAO,CAACW,MAAR,CAAehC,OAAO,CAACiC,gBAAR,EAAf,CAAP;EACA,CAP+B,EAO7B,CACFb,MADE,EAEFC,OAFE,CAP6B,CAAhC,CAFE,CAcF;;EACA,IAAMa,OAAO,GAAGpC,OAAO,CAAC,YAAM;IAC7B,OAAOK,UAAU,CAAC4B,gBAAD,EAAmB;MAAEF,QAAQ,EAARA;IAAF,CAAnB,CAAjB;EACA,CAFsB,EAEpB,CACFE,gBADE,EAEFF,QAFE,CAFoB,CAAvB,CAfE,CAsBF;EACA;;EACApB,IAAI,GAAGX,OAAO,CAAC;IAAA,OAAMI,OAAO,CAACO,IAAD,CAAb;EAAA,CAAD,EAAsB,CAACA,IAAD,CAAtB,CAAd,CAxBE,CA0BF;;EACA,IAAM0B,UAAU,GAAGtC,WAAW,CAAC,YAAM;IACpC,IAAI8B,GAAG,GAAG,CAACD,WAAW,IAAIU,IAAI,CAACT,GAAL,EAAhB,IAA8BC,UAAxC;IACA,IAAIS,WAAJ;IACA,IAAI3B,MAAJ,EAAY;MACX,IAAIiB,GAAG,IAAIlB,IAAI,CAAC6B,OAAL,EAAX,EAA2B;QAC1BX,GAAG,GAAGlB,IAAI,CAAC6B,OAAL,EAAN;QACAD,WAAW,GAAG,IAAd;MACA;IACD;IACD,IAAIxB,WAAW,KAAK0B,SAApB,EAA+B;MAC9B,IAAMC,MAAM,GAAG/B,IAAI,CAAC6B,OAAL,KAAiBzB,WAAW,GAAG,IAA9C;MACA,IAAIc,GAAG,GAAGa,MAAV,EAAkB;QACjBb,GAAG,GAAGa,MAAN;QACAH,WAAW,GAAG,IAAd;MACA;IACD;IACD,sBAAwCH,OAAO,CAACO,MAAR,CAAehC,IAAf,EAAqBE,SAArB,EAAgC;QACvE+B,mBAAmB,EAAE,IADkD;QAEvEf,GAAG,EAAHA,GAFuE;QAGvEjB,MAAM,EAANA,MAHuE;QAIvEE,KAAK,EAALA;MAJuE,CAAhC,CAAxC;MAAA+B;MAAKC,aAAL;MAAoBC,gBAApB;IAMA,IAAIR,WAAJ,EAAiB;MAChBQ,gBAAgB,GAAGC,QAAnB;IACA,CAFD,MAEO;MACN;MACA;MACA;MACA;MACAD,gBAAgB,GAAGrB,cAAc,IAAIqB,gBAAlB,IAAsC,KAAK,IAA9D,CALM,CAK6D;IACnE;;IACD,OAAO,CAACD,aAAD,EAAgBjB,GAAG,GAAGkB,gBAAtB,CAAP;EACA,CAhC6B,EAgC3B,CACFpC,IADE,EAEFC,MAFE,EAGFC,SAHE,EAIFa,cAJE,EAKFZ,KALE,EAMFC,WANE,EAOFqB,OAPE,EAQFR,WARE,CAhC2B,CAA9B;EA2CA,IAAMqB,aAAa,GAAGnD,MAAM,EAA5B;EACAmD,aAAa,CAACC,OAAd,GAAwBb,UAAxB;EAEA,eAA0CrC,OAAO,CAACqC,UAAD,EAAa,EAAb,CAAjD;IAAAc;IAAOC,cAAP;IAAuBC,eAAvB;EACA,gBAA0CxD,QAAQ,CAACuD,cAAD,CAAlD;IAAAE;IAAOR,aAAP;IAAsBS,gBAAtB;EAEA,IAAMC,OAAO,GAAG1D,MAAM,EAAtB;EAEAF,SAAS,CAAC,YAAM;IACf,IAAI+B,IAAJ,EAAU;MACT6B,OAAO,CAACN,OAAR,GAAkB5C,OAAO,CAACmD,GAAR,CAAY;QAC7BC,YAAY,EAAE;UAAA,OAAMT,aAAa,CAACC,OAAd,EAAN;QAAA,CADe;QAE7BS,QAAQ,EAAEJ,gBAFmB;QAG7BK,cAAc,EAAEP;MAHa,CAAZ,CAAlB;MAKA,OAAO;QAAA,OAAMG,OAAO,CAACN,OAAR,CAAgBW,IAAhB,EAAN;MAAA,CAAP;IACA;EACD,CATQ,EASN,CAAClC,IAAD,CATM,CAAT;EAWA/B,SAAS,CAAC,YAAM;IACf,IAAI4D,OAAO,CAACN,OAAZ,EAAqB;MACpBM,OAAO,CAACN,OAAR,CAAgBY,WAAhB;IACA,CAFD,MAEO;MACN,kBAAwBzB,UAAU,EAAlC;QAAA0B;QAAOjB,eAAP;MACAS,gBAAgB,CAACT,eAAD,CAAhB;IACA;EACD,CAPQ,EAON,CAACT,UAAD,CAPM,CAAT,CAzFE,CAkGF;;EACA,IAAM2B,oBAAoB,GAAGhE,OAAO,CAAC,YAAM;IAC1C,OAAOG,uBAAuB,CAC7B8B,gBAD6B,EAE7BR,iBAF6B,CAA9B;EAIA,CALmC,EAKjC,CACFQ,gBADE,EAEFR,iBAFE,CALiC,CAApC,CAnGE,CA6GF;;EACA,IAAMwC,WAAW,GAAGjE,OAAO,CAAC,YAAM;IACjC,IAAIwB,iBAAJ,EAAuB;MACtB,OAAOA,iBAAiB,CAACb,IAAD,CAAxB;IACA;IACD,OAAOqD,oBAAoB,CAACrD,IAAD,CAA3B;EACA,CAL0B,EAKxB,CACFA,IADE,EAEFa,iBAFE,EAGFwC,oBAHE,CALwB,CAA3B;EAWA,IAAME,MAAM,gBACXvE,oBAACsB,SAAD;IACCN,IAAI,EAAEA,IADP;IAECsD,WAAW,EAAEA,WAFd;IAGCjD,OAAO,EAAEA;EAHV,GAIKgB,IAJL,GAKEc,aALF,CADD;EAUA,IAAMqB,gBAAgB,GAAG/C,gBAAgB,IAAID,SAA7C;EAEA,IAAIgD,gBAAJ,EAAsB;IACrB,oBACCxE,oBAACwE,gBAAD,eACK9C,YADL;MAEC4C,WAAW,EAAEA;IAFd,IAGEC,MAHF,CADD;EAOA;EAED,OAAOA,MAAP;AACA;AAEDxD,YAAY,CAAC0D,SAAb,GAAyB;EACxB;EACA;EACAzD,IAAI,EAAEV,SAAS,CAACoE,SAAV,CAAoB,CACzBpE,SAAS,CAACqE,UAAV,CAAqBhC,IAArB,CADyB,EAEzBrC,SAAS,CAACsE,MAFe,CAApB,EAGHC,UANqB;EAQxB;EACA;EACA;EACAlD,MAAM,EAAErB,SAAS,CAACwE,MAXM;EAaxB;EACA;EACA;EACA;EACAlD,OAAO,EAAEtB,SAAS,CAACyE,OAAV,CAAkBzE,SAAS,CAACwE,MAA5B,CAjBe;EAmBxB;EACA;EACA;EACA;EACA7D,MAAM,EAAEX,SAAS,CAAC0E,IAvBM;EAyBxB;EACA;EACA;EACA9D,SAAS,EAAEJ,SA5Ba;EA8BxB;EACA;EACA;EACAK,KAAK,EAAEb,SAAS,CAACwE,MAjCO;EAmCxB;EACA;EACA;EACA1D,WAAW,EAAEd,SAAS,CAACsE,MAtCC;EAwCxB;EACA;EACA;EACA;EACA;EACA;EACA;EACArD,SAAS,EAAEjB,SAAS,CAAC2E,WAAV,CAAsBJ,UA/CT;EAiDxB;EACA;EACA;EACAxD,OAAO,EAAEf,SAAS,CAAC0E,IAAV,CAAeH,UApDA;EAsDxB;EACA;EACAhD,iBAAiB,EAAEvB,SAAS,CAAC4E,IAxDL;EA0DxB;EACA;EACApD,iBAAiB,EAAExB,SAAS,CAAC6E,MA5DL;EA8DxB;EACA;EACA;EACA;EACApD,cAAc,EAAEzB,SAAS,CAACoE,SAAV,CAAoB,CACnCpE,SAAS,CAACsE,MADyB,EAEnCtE,SAAS,CAACyE,OAAV,CAAkBzE,SAAS,CAAC8E,KAAV,CAAgB;IACjCC,SAAS,EAAE/E,SAAS,CAACsE,MADY;IAEjCU,QAAQ,EAAEhF,SAAS,CAACsE,MAAV,CAAiBC;EAFM,CAAhB,CAAlB,CAFmC,CAApB,CAlEQ;EA0ExB;EACA;EACA;EACA;EACA7C,IAAI,EAAE1B,SAAS,CAAC0E,IA9EQ;EAgFxB;EACA;EACA9C,GAAG,EAAE5B,SAAS,CAACsE,MAlFS;EAoFxB;EACA;EACAzC,UAAU,EAAE7B,SAAS,CAACsE,MAtFE;EAwFxB;EACA;EACAxC,QAAQ,EAAE9B,SAAS,CAAC0E,IA1FI;EA4FxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAvD,gBAAgB,EAAEnB,SAAS,CAAC2E,WArGJ;EAuGxB;EACAvD,YAAY,EAAEpB,SAAS,CAAC6E;AAxGA,CAAzB;AA2GApE,YAAY,CAACwE,YAAb,GAA4B;EAC3B;EACA3D,OAAO,EAAE,EAFkB;EAI3B;EACAL,SAAS,EAAEX,IALgB;EAO3B;EACAS,OAAO,EAAE,IARkB;EAU3B;EACA;EACAS,iBAAiB,EAAE;IAClB0D,OAAO,EAAE,MADS;IAElBC,GAAG,EAAE,SAFa;IAGlBC,KAAK,EAAE,MAHW;IAIlBC,IAAI,EAAE,SAJY;IAKlBC,IAAI,EAAE,SALY;IAMlBC,MAAM,EAAE,SANU;IAOlBC,MAAM,EAAE,SAPU,CAQlB;EARkB,CAZQ;;EAuB3B;EACA9D,IAAI,EAAE,IAxBqB;EA0B3B;EACAG,UAAU,EAAE;AA3Be,CAA5B,C,CA8BA;AACA;;AACApB,YAAY,gBAAGf,KAAK,CAAC+F,IAAN,CAAWhF,YAAX,CAAf;AAEA,eAAeA,YAAf,C,CAEA;AACA;;AACA,IAAMiF,IAAI,GAAG,MAAM,EAAN,GAAW,EAAX,GAAgB,EAAhB,GAAqB,IAAlC;AACA,IAAM3C,QAAQ,GAAG,OAAO2C,IAAxB","names":["React","useEffect","useState","useRef","useCallback","useMemo","PropTypes","TimeAgo","getVerboseDateFormatter","getDate","getTimeAgo","Updater","Time","style","styleType","ReactTimeAgo","date","future","timeStyle","round","minTimeLeft","tooltip","Component","component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","nowProperty","now","timeOffset","polyfill","rest","preferredLocales","concat","getDefaultLocale","timeAgo","formatDate","Date","stopUpdates","getTime","undefined","maxNow","format","getTimeToNextUpdate","_timeAgo$format2","formattedDate","timeToNextUpdate","INFINITY","formatDateRef","current","_useMemo2","_formattedDate","_nextUpdateTime","_useState2","setFormattedDate","updater","add","getNextValue","setValue","nextUpdateTime","stop","forceUpdate","_formatDate2","verboseDateFormatter","verboseDate","result","WrapperComponent","propTypes","oneOfType","instanceOf","number","isRequired","string","arrayOf","bool","elementType","func","object","shape","threshold","interval","defaultProps","weekday","day","month","year","hour","minute","second","memo","YEAR"],"sources":["D:\\git\\utube\\client\\node_modules\\react-time-ago\\source\\ReactTimeAgo.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter.js'\r\nimport { getDate } from './helpers/date.js'\r\nimport getTimeAgo from './helpers/getTimeAgo.js'\r\n\r\nimport Updater from './Updater.js'\r\nimport Time from './Time.js'\r\n\r\nimport { style as styleType } from './PropTypes.js'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\tnow: nowProperty,\r\n\ttimeOffset,\r\n\tpolyfill,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn getTimeAgo(preferredLocales, { polyfill })\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tpolyfill\r\n\t])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = (nowProperty || Date.now()) - timeOffset\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo,\r\n\t\tnowProperty\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\treturn getVerboseDateFormatter(\r\n\t\t\tpreferredLocales, \r\n\t\t\tverboseDateFormat\r\n\t\t)\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={verboseDate}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={verboseDate}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string — Formatted verbose date.\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// Allows setting a custom baseline for relative time measurement.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\tnow: PropTypes.number,\r\n\r\n\t// Allows offsetting the `date` by an arbitrary amount of milliseconds.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\ttimeOffset: PropTypes.number,\r\n\r\n\t// Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\r\n\t// instead of the polyfilled ones in `javascript-time-ago`.\r\n\tpolyfill: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.elementType,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true,\r\n\r\n\t// No time offset.\r\n\ttimeOffset: 0\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// A thousand years is practically a metaphor for \"infinity\"\r\n// in the context of this component.\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR"]},"metadata":{},"sourceType":"module","externalDependencies":[]}